# -*- coding: utf-8 -*-
"""heart disease prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102zTPq_qsZc0wNnRVqGiHq6lMTcVN_DW
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn import svm

csv_data1 =("/content/heart_disease_data.csv")
heart_dataset_1 = pd.read_csv(csv_data1 )

csv_data2 =("/content/Heart_Disease_Prediction.csv")
heart_dataset_2 = pd.read_csv(csv_data2 )

csv_data3 =("/content/heart.csv")
heart_dataset_3 = pd.read_csv(csv_data3 )

print("dataset_1:")
display(heart_dataset_1.head())
print("dataset_2:")
display(heart_dataset_2.head())
print("dataset_3:")
display(heart_dataset_3.head())

print("dataset_1:")
display(heart_dataset_1.tail())
print("dataset_2:")
display(heart_dataset_2.tail())
print("dataset_3:")
display(heart_dataset_3.tail())

print("dataset_1:")
display(heart_dataset_1.shape)
print("dataset_2:")
display(heart_dataset_2.shape)
print("dataset_3:")
display(heart_dataset_3.shape)

print("dataset_1:")
display(heart_dataset_1.info())
print("dataset_2:")
display(heart_dataset_2.info())
print("dataset_3:")
display(heart_dataset_3.info())

print("dataset_1:")
display(heart_dataset_1.isnull().sum())
print("dataset_2:")
display(heart_dataset_2.isnull().sum())
print("dataset_3:")
display(heart_dataset_3.isnull().sum())

print("dataset_1:")
display(heart_dataset_1.describe())
print("dataset_2:")
display(heart_dataset_2.describe())
print("dataset_3:")
display(heart_dataset_3.describe())

print("dataset_1:")
display(heart_dataset_1['target'].value_counts())
print("dataset_2:")
display(heart_dataset_2['Heart Disease'].value_counts())
print("dataset_3:")
display(heart_dataset_3['target'].value_counts())

print("dataset_1:")
heart_dataset_1.groupby('target').mean()
print("dataset_2:")
heart_dataset_2.groupby('Heart Disease').mean()
print("dataset_3:")
heart_dataset_3.groupby('target').mean()

#heart_dataset_1:
x = heart_dataset_1.drop(columns='target', axis=1)
y = heart_dataset_1['target']

#heart_dataset_2:
x = heart_dataset_2.drop(columns='Heart Disease', axis=1)
y = heart_dataset_2['Heart Disease']

#heart_dataset_3:
x = heart_dataset_3.drop(columns='target', axis=1)
y = heart_dataset_3['target']

print("dataset_1:")
print(x)
print("dataset_2:")
print(x)
print("dataset_3:")
print(x)

print("dataset_1:")
print(y)
print("dataset_2:")
print(y)
print("dataset_3:")
print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=8)

print("dataset_1:")
print(x.shape,x_train.shape,x_test.shape)
print("dataset_2:")
print(x.shape,x_train.shape,x_test.shape)
print("dataset_3:")
print(x.shape,x_train.shape,x_test.shape)

print(x_test)

classifier = svm.SVC(kernel='linear')

classifier.fit(x_train, y_train)

model=LogisticRegression()

model.fit(x_train,y_train)

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on Training data:',training_data_accuracy)

x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print('Accuracy on Test data:', training_data_accuracy)

#input_Data = (age, sex, CP, BP, cholesterol, FBS over 120, ECG Result, Max HR, Exercise angina, ST depression, Slope of ST, Number of vessels fluro, Thallium
input_data = (64,1,2,140,335,0,1,158,0,0.0,2,0,2)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshape)
print(prediction)
if (prediction[0]==0):
  print('The person does not have a Heart Disease')
else:
  print('The person has Heart Disease')

import pickle

filename = 'Heart disease prediction bot trained_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('Heart disease prediction bot trained_model.sav', 'rb'))

input_data = (58,0,0,100,248,0,0,122,0,1,1,0,2)
input_data_as_numpy_array= np.asarray(input_data)
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = loaded_model.predict(input_data_reshape)
print(prediction)
if (prediction[0]==0):
  print('The person does not have a Heart Disease')
else:
  print('The person has Heart Disease')